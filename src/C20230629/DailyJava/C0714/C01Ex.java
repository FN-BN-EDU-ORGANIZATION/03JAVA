package C0714;

public class C01Ex {

}
//
//데이터베이스 개요 
//
//스키마(Schema)
//: 데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 것
//- 외부스키마 : 사용자나 응용프로그래머가 각 개인의 입장에서 필요로 하는 데이터 베이스의 논리적 구조를 정의한 것
//- 개념스키마 : 데이터베이스의 전체적인 논리적 구조. 사용자들이 필요로 하는 데이터를 종합한 조직 전체의 데이터베이스로 하나만 존재
//- 내부스키마 : 물리적 저장장치의 입장에서 본 데이터베이스 구조. 실제로 저장될 레코드의 형식. 저장 데이터 항목의 표현 방법, 내부 레코드의 물리적 순서 등을 나타냄
//
//데이터베이스 설계 
//
//설계 시 고려사항
//- 무결성 : 삽입, 삭제, 갱신 등의 연산 후에도 저장된 데이터가 정해진 제약 조건을 항상 만족해야함
//- 일관성 : 저장된 데이터들 사이나, 특정 질의에 대한 응답이 처음부터 끝까지 변함없이 일정해야함
//- 회복 : 시스템에 장애가 발생했을 때 장애 발생 직전의 상태로 복구할 수 있어야 함
//- 보안 : 불법적인 데이터의 노출, 변경, 손실로부터 보호할 수 있어야 함
//- 효율성 : 응답시간의 단축, 시스템의 생산성, 저장 공간의 최적화 등이 가능해야 함
//- 데이터베이스 확장 : 운영에 영향을 주지 않으면서 지속적으로 데이터를 추가할 수 있어야 함
//
//설계 순서 
//요구 조건 분석 -> 개념적 설계 -> 논리적 설계 -> 물리적 설계 -> 구현
//
//개념적 설계(정보 모델링, 개념화) : 현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정
//논리적 설계(데이터 모델링) : 현실 세계에서 발생하는 자료를 특정 DBMS가 지원하는 논리적 자료 구조로 변환(mapping)시키는 과정
//물리적 설계(데이터 구조화) : 논리적 구조로 표현된 데이터를 물리적 구조의 데이터로 변환하는 과정
//
//데이터 모델에 표시할 요소
//- 구조(Structure) : 논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질 표현
//- 연산(Operation) : 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구
//- 제약 조건(Constraint) : 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건
//
//E-R 모델
//사각형 - 개체, 마름모 - 관계, 타원 - 속성, 이중 타원 - 다중값 속성, 선 - 개체 타입과 속성을 연결
//
//관계형 데이터베이스 
//: 2차원적 표(Table)를 이용해서 데이터 상호 관계를 정의하는 데이터베이스
//
//관계형 데이터베이스의 릴레이션 구조 
//: 데이터들을 표의 형태로 표현한 것
//
//튜플(Tuple, Cardinality, 기수, 대응수) : 릴레이션을 구성하는 각각의 행
//속성(Attribute, Degree, 차수) : 데이터베이스를 구성하는 가장 작은 논리적 단위
//
//도메인(Domain) : 하나의 속성이 취할 수 있는 같은 타입의 원자(Atomic)값들의 집합
//
//릴레이션의 특징 
//- 똑같은 튜플이 포함될 수 없으므로 튜플들을 모두 상이하다
//- 순서가 없다
//- 릴레이션은 시간에 따라 변한다
//- 속성들 간의 순서는 중요하지 않다
//- 속성의 명칭은 유일하지만 속성을 구성하는 값은 동일한 값이 있을 수 있다
//
//관계형 데이터 모델(Relational Data Model)
//: 2차원적인 표를 이용해서 데이터 상호 관계를 정의하는 DB 구조. 일대일, 일대다,다대다 관계를 자유롭게 표현할 수 있다
//
//관계형 데이터베이스의 제약 조건 - Key
//- 후보키(Candidate Key) : 속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합. 유일성과 최소성을 만족시켜야 함
//	- 유일성(Unique) : 하나의 키 값으로 하나의 튜플만을 유익하게 식별
//	- 최소성(Minimality) : 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소성의 속성으로 구성되어야 함
//- 기본키(Primary Key) : 후보키 중에서 특별히 선정된 주키(Main Key), 중복값을 가질 수 없고 null값을 가질 수 없다
//- 대체키(Alternate Key) : 후보키가 둘 이상일때 기본키를 제외한 나머지 후보키
//- 슈퍼키(Super Key) : 속성들의 집합으로 구성된 키. 유일성은 만족하지만 최소성은 만족하지 못한다
//- 외래키(Foreign Key) : 다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합
//
//관계형 데이터베이스의 제약 조건 - 무결성
//- 무결성(Integrity) : 데이터베이스에 저장된 데이터 값과 현실 세계의 실제값이 일치하는 정확성
//
//무결성의 종류 
//- 개체 무결성 : 기본키를 구성하는 어떤 속성도 null값이나 중복값을 가질 수 없다는 규정
//- 참조 무결성 : 릴레이션은 참조할 수 없는 외래키 값을 가질 수 없다는 규정
//- 도메인 무결성 : 주어진 속상 값이 정의된 도메인에 속한 값이어야 한다는 규정
//- 사용자 정의 무결성 : 속성 값들이 사용자가 정의한 제약조건에 만족되어야 한다는 규정
//
//관계대수 및 관계해석
//관계대수
//: 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 절차적인 언어
//
//순수 관계 연산자 
//- select( σ 시그마 ) : 선택 조건을 만족하는 튜플의 부분집합을 구하여 새로운 릴레이션을 만드는 연산, 수평 연산자
//- project( π 파이 ) : 속성 리스트에 제시된 속성 값만을 추출하여 새로운 릴레이션을 만드는 연산, 중복이 제거됨, 열에 해당하는 속성을 추출하는 것이므로 수직 연산자
//- join(▷◁) : 두 개의 릴레이션을 하나로 합쳐서 새로운 릴레이션을 만드는 연산, 교차곱을 수행한 다음 select를 수행하는 것과 같음
//- division(÷) : R의 속성이 S의 속성값을 모두 가진 튜플에서 S가 가진 속성을 제외한 속성만을 구하는 연산
//
//일반 집합 연산자(p.175)
//- 합집합(UNION U) : 중복되는 튜플은 제거되는 연산
//- 교집합(INTERSECTION  ∩) : 교집합을 구하는 연산
//- 차집합(DIFFERENCE - ) : 차집합을 구하는 연산
//- 교차곱(CARTESIAN PRODUCT X ) : 튜플들의 순서쌍을 구하는 연산
//
//관계해석(Relational Calculus)
//: 관계 데이터의 연산을 표현하는 방법. 코드(E. F. Codd)가 수학의 Predicate Calculus(술어 해석)에 기반을 두고 관계 데이터베이스를 위해 제안, 비절차적 특성, 원하는 정보를
//정의할 때는 계산 수식을 사용
//
//이상/함수적 종속
//- 이상(Anomaly) : 데이터의 중복이 발생하고 이 중복(Redundancy)으로 문제가 발생하는 현상
//	- 삽입이상(Insertion Anomaly) : 데이터를 삽입할 때 의도와는 상관없이 원하지 않은 값들로 인해 삽입할 수 없게 되는 현상
//	- 삭제이상(Deletion Anomaly) : 한 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는 현상
//	- 생신이상(Update Anomaly) : 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성이 생기는 현상
//
//함수적 종속(Functional Dependency) (p.181)
//- 완전 함수적 종속(Full Functional Dependency)    
//- 부분 함수적 종속(Partial Functional Dependency)
//- 이행적 함수적 종속(Transitive Functional Dependency)
//
//정규화 과정 정리
//	비정규 릴레이션	
//		도메인이 원자값
//	1NF
//		부분적 함수 종속 제거
//	2NF
//		이행적 함수 종속 제거
//	3NF
//		결정자이면서 후보키가 아닌 것 제거
//	BCNF
//		다치 종속 제거
//	4NF
//		조인 종속성 이용
//	5NF
//
//반정규화(Denormalization)
//: 정규화된 데이터 모델을 의도적으로 통합, 중복, 분리하여 정규화 원칙을 위배하는 행위
//
//중복 테이블 추가
//- 중복 테이블 추가 방법
//	- 집계 테이블의 추가 : 원본 테이블에 트리거를 설정
//	- 진행 테이블의 추가 : 이력 관리 등의 목적으로 추가하는 테이블
//	- 특정 부분만을 포함하는 테이블의 추가 : 데이터가 많은 테이블의 특정 부분만을 사용하는 경우 해당 부분만으로 새로운 테이블 생성
//
//시스템 카탈로그(System Catalog)
//: 다양한 객체에 관한 정보를 포함하는 시스템 데이터베이스
//메타 데이터(Meta-Data)
//: 시스템 카탈로그에 저장된 정보
//데이터 디렉터리(Data Directory)
//: 데이터 사전에 수록된 데이터에 접근하는 데 필요한 정보를 관리 유지하느 시스템
//
//트랜젝션(Transaction)
//: 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들
//
//트랜잭션의 특성
//- Atomicity(원자성) : 모두 반영되도록 완료(Commit)되든지 아니면 전혀 반영되지 않도록 복구(Rollback)되어야 함
//- Consistency(일관성) : 트랜잭션이 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환함
//- Isolation(독립성, 격리성, 순차성) : 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없음
//- Durability(영속성, 지속성) : 시스템이 고자나더라도 영구적으로 반영되어야 함
//
//CRUD 분석
//- 프로세스와 테이블 간에 CRUD 매트릭스를 만들어서 트랜잭션을 분석하는 것
//
//데이터베이스 이중화/서버 클러스터링
//- RTO/RPO
//	- RTO(Recovery Time Objective, 목표 복구 시간) : 비상사태 또는 업무 중단 시점으로부터 복구되어 가동될 때까지의 소요 시간을 의미
//	- RPO(Recovery Point Objective, 목표 복구 시점) : 비상사태 또는 업무 중단 시점으로부터 복구할 수 있는 기준점 
//
//데이터베이스 보안
//- 암호화(Encryption)
//	- 암호화 과정 : 암호화되지 않은 평문을 암호문으로 바꾸는 과정
//	- 복호화 과정 : 암호문을 원래의 평문으로 바꾸는 과정
//
//- 접근통제 기술
//	- 임의 접근통제(DAC, Discretionary Access Control) : 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식, 데이터 소유자가 접근 통제 권한을 지정하고 제어. 객체를 생성한 사용자가 생성된 객체							에 대한 모든 권한을 부여받고, 부여된 권한을 다른 사용자에게 허가할 수도 있음
//	- 강제 접근통제(MAC, Mandatory Access Control) : 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식, 시스템이 접근통제 권한을 지정
//	- 역할기반 접근통제(RBAC, Role Based Access Control) : 사용자의 역할에 따라 접근 권한을 부여하는 방식. 중앙관리자가 접근통제 권한을 지정
//
//데이터베이스 백업
//- 로그 파일 : 데이터베이스의 상태 변화를 시간의 흐름에 따라 모두 기록한 파일
//	- 복귀(Undo) : 가장 최근에 변경된 내용부터 거슬러 올라가면서 트랜잭션 작업을 취소하여 원래의 데이터베이스로 복구
//	- 재생(Redo) : 가장 최근의 정상저인 데이터베이스로 회복시킨 후 트랜잭션을 재실행시킴
//
//스토리지
//: 대용량의 데이터를 저장하기 위해 서버와 저장장치를 연결하는 기술(DAS, NAS, SAN)
//
//- DAS(Direct Attached Storage) : 서버와 저장장치를 전용 케이블로 직접 연결하는 방식. 컴퓨터에 외장하드를 연결하는 것이 해당. 직접 연결 -> 속도빠르고 설치 및 운영 쉬움. 초기 구축 비용 및 유지보수 비용이 저렴
//- NAS(Network Attached Storage) : 서버와 저장장치를 네트워크를 통해 연결하는 방식. 장소에 구애받지 않고 저장장치에 쉽게 접근할 수 있음
//- SAN(Storage Area Network) : 서버와 저장장치를 연결하는 전용 네트워크를 별도로 구성하는 방식. 광 채널 스위치는 서버와 저장장치를 광케이블로 연결하므로 처리 속도가 빠름. 확장성, 유연성, 가용성이 뛰어남
//	
//자료 구조
//- 선형구조(Linear Structure) - 배열, 선형 리스트, 스택, 큐, 데크			
//- 비선형구조(Non-Linear Structure) - 트리, 그래프
//
//스택(Stack) : 리스트의 한쪽 끝으로만 자료의 삽입, 삭제 작업이 이루어지는 자료 구조. 후입선출(LIFO). 저장하 기업 공간이 없는 상태에서 데이터가 삽입되면 오버플로가 발생. 삭제할 데이터가 없는 상태에서 데이터를 삭제하면 언더플로가 발생
//
//큐(Queue) : 리스트의 한쪽에서는 삽입 작업이 다른 한쪽에서는 삭제 작업이 이루어지는 자료 구조. 선입선출(FIFO). 시작을 표시하는 프런트 포인터와 끝을 표시하는 리어 포인터가 있음
//
//방향/무방향 그래프의 최대 간선 수 
//- 방향 그래프의 최대 간선 수 : n(n-1)
//- 무방향 그래프의 최대 간선 수 : n(n-1)/2
//
//이진트리(p.236 참조)
//
//
//
//
//
//
//
//
//
//
//
//정렬(Sort)
//- 삽입 정렬(Insertion Sort) : 이미 순서화된 파일에 새로운 하나의 레코드를 순서에 맞게 삽입시켜 정렬하는 방식. 평균,최악 수행 시간 복잡도 O(n^2)
//- 선택 정렬(Selection Sort) : 최소값을 찾아 첫번째 위치에 놓고 다시 최소값을 찾아 두번째 레코드 위치에 놓는 방식을 반복하여 정렬하는 방식. 평균, 최악 수행 시간 복잡도 O(n^2)
//- 버블 정렬(Bubble Sort) : 인접한 두개의 레코드 키 값을 비교하여 그 크기에 따라 레코드 위치를 서로 교환하는 정렬 방식. 평균, 최악 수행 시간 복잡도 O(n^2)
//- 쉘 정렬(Shell Sort) : 매개변수의 값으로 서브파일을 구성하고, 각 서브파일을 Insertion 정렬 방식으로 순서 배열. 평균 수행 시간 복잡도 O(n^1.5), 최악 수행 시간 복잡도 O(n^2)
//- 퀵 정렬(Quick Sort) : 키를 기준으로 작은 값은 왼쪽, 큰 값은 오른쪽 서브파일에 분해시키는 과정을 반복하는 정렬 방식. 평균 수행시간 복잡도 O(nlog2n) 최악 수행 시간 복잡도 O(n^2)
//- 힙 정렬(Heap Sort) : 전이진 트리를 이용한 정렬 방식. 평균, 최악 시간 복잡도 O(nlog2n)
//- 2-way 합병 정렬(Merge Sort) : 이미 정렬되어 있는 두 개의 파일을 한 개의 파일로 합병하는 정렬 방식. 평균, 최악 수행 시간 복잡도 O(nlog2n)
//- 기수 정렬(Radix Sort, Bucket Sort) : Queue를 이용하여 자릿수(Digit)별로 정렬하는 방식. 평균, 최악 수행 시간 복잡도 O(dn)












