package 윤광혁;

public class 예제20230710 {
	//1
	//업케스팅 다운케스팅
	//업/다운 케스팅은 클레스간의 상속관계에서 발생하는 형변환을 의미한다.
	//
	//업케스팅
	//업 케스팅은 자식 클레스의 인스턴스를 부모클레스 타입으로 변환하는것을 말한다.
	//자식에서 부모로의 업케스팅은 자동으로 이루어진다.
	//업캐스팅된 자식 클레스트 인스턴스는 부모 클레스의 타입을 가지지만
	//실제로는 자식 클레스의 메서드를 호출할수있다. 이는 다형성의 특징중 하나이다.
	//업 케스팅은 안전한 형변환 이기 댸문에 별도의 캐스팅 연산자를 사용하지않고 진행된다.
	
	//다운캐스팅
	//부모 클레스타입의 인스턴스를 자식 클레스타입 으로 변환하는것을 말한다.
	//다운캐스팅은 업캐스팅의 반대 개념으로 명시적인 형변환 연산자를 사용해야한다.
	//다운 캐스팅은 업캐스팅된 인스턴스를 다시 원래의 자식 클래스 타입으로 되돌리는 작업이다.
	//다운 캐스팅은 안전하지 않은 형변환 이기 떄문에 업캐스팅된 인스턴스가 실제로 자식 클레스의 인스턴스 인지 확인해야한다.
	//그렇지 않으면 클레스케스팅 예외가 발생할수있다.
	
	//캐스팅을 남발하면 코드의 유연성과 유지보수성이 저하될수있다. 이것은 인터페이스를 사용하는 이유이다.
	
	//2
	//인터페이스를 사용하는 이유
	//다형성 인터페이스를 구현하는 여러 클레스들은 같은 인터페이스 타입으로 참조될수있다.
	//이를 통해 다양한 구현 클레스들을 일관된 방식으로 사용하고 교환할수있다.
	//인터페이스 타입을 참조하는 경우 실제로 어떤 클레스의 인스턴스인지 신경쓰지않고 공통된 인터페이스의
	//메서드를 호출할수있다.
	
	//인터페이스는 클레스간의 계약을 정의하는대 사용된다.
	//인터페이스는 어떤 메서드를 제공해야 하는지 명시하여 구현 클레스 에게 메서드의 구현을 강제할수있다.
	
	//결합도 감소 
	//인터페이스를 사용하면 클레스간의 결합도를 감소시킬수있다. 구현 클레스가 직접 다른 클레스에
	//의존하지 않고 인터페이스에만 의존하므로 클레스간의 의존 성이 줄어든다.
	
	//자바에서 클레스의 다중 상속은 허용하지 않지만 인터페이스는 다중 상속을 지원한다.
	
	//인터페이스는 변경에 의한 영향을 최소화하면서 기존 코드에 새로운 기능을 추가하는대 용의하다.
	
}
