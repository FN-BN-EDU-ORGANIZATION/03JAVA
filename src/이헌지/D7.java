package 이헌지;

//3.1 Hello.java
//자바로 프로그램을 개발하려면 JDK이외에도 편집기가 필요하다. 메모장과 같은 간단한 편집기도 있지만,처음 자바를 배우는 사람들에게는 이클립스(eclips)나
//인텔리제이(IntelliJ)와 같이 다양하고 편리한 기능을 겸비한 고급 개발도구들 사용하는 것이 좋다.
//이클립스에 비해 기능은 떨어지지만, 가볍고 간단한 편집기로 에딧플러스(editplus)라는 것도 있다.

//|참고| editplus는 http://www.editplus.com에 가면 평가판을 무료로 제공한다.

//예제 1-1/ch1/Hello,java


//class Ch03자바로프로그램작성하기{
//
//
//	public static void main(String[]args) {
//		System.out.println("Hello, world."); //화면에 글자를 출력한다. 실행결과: "Hello, world." 출력
//	}
//}

//이 예제는 화면에 'Hello,world'를 출력하는 아주 간단한 프로그램이다. 이 예제를 통해서 화면에 글자를 출력하려면 어떻게 해야하는지
//쉽게 알 수 있을 것이다.       javac.exe: 컴파일 java.exe : 실행
//자바에서 모든 코드는 반드시 클래스 안에 존재해야 하며, 서로 관련된 코드들을 그룹으로 나누어 별도의 클래스를 구성하게 된다.
//그리고 이 클래스들이 모여 하나의 Java 애플리케이션을 이룬다. 클래스를 작성하는 방법은 간단하다. 키워드'class'다음에 클래스의 이름을 적고,
//클래스의 시작과 끝을 의미하는 괄호{}안에 원하는 코드를 넣으면 된다.
//-------------------------------------------------------------
//class 클래스이름 {
///* 
//    주석을 제외한 모든 코드는 클래스의 블럭{}0 내에 작성해야한다.
// */
//}
//|참고| 나중에 배우게 될 package문과 import문은 예외적으로 클래스의 밖에 작성한다.
//--------------------------------------------------------------
//아래 코드의 'public static void main(String[] args)'는 main메서드의 선언부인데,프로그램을 실행할 때 'java.exe.'에 의해
//호출될 수 있도록 미리 약속된 부분이므로 항상 똑같이 적어주어야 한다.

//|참고| '{}'은 배열을 의미하는 기호로 배열의 타입(type) 또는 배열의 이름 옆에 붙일 수 있다. 'String[] args'는 
//String 타입의 배열 args를 선언한 것이며, 'String args[]'와 같이 쓸 수도 있다. 이 둘은 같은 의미이므로 차이가 없다. 
//자세한 내용은 '5장 배열'에서 배우게 될 것이다.
//--------------------------------------------------------------
//class 클래스이름 {
//public static void main(String[]args)  // main메서드의 선언부 
//{  
//            실행될 문자들을 적는다.
//}
//}
//--------------------------------------------------------------
//main메서드의 선언부 다음에 나오는 괄호{}는 메서드의 시작과 끝을 의미하며, 이 괄호 사이에 작업할 내용을 작성해 넣으면 된다.
//Java 애플리케이션은 main메서드의 호출로 시작해서 main메서드의 첫 문장부터 마지막 문장까지 수행을 마치면 종료된다.

//모든 클래스가 main 메서드를 가지고 있어야 하는 것은 아니지만,하나의 Java 애플리케이션에는 main메서드를 포함한 클래스가 반드시 하나는 있어야 한다.
//main메서드는 Java애플리케이션의 시작점이므로 main메서드 없이는 Java 애플리케이션은 실행될 수 없기 때문이다.
//작성된 Java애플리케잇ㄴ을 실행할 때는'java.exe' 다음에 main메서드를 포함한 클래스의 이름을 적어줘야 한다.

//하나의 소스파일에 하나의 클래스만을 정의하는 것이 보통이지만,하나의 소스파일에 둘 이상의 클래스를 정의하는 것도 가능하다.
//이 때 주의해야할 점은'소스파일의 이름은 public class의 이름과 일치해야 한다'는 것이다. 만인 소스파일 내에
//public class가 없다면,소스파일의 이름은 소스파일 내의 어떤 클래스의 이름으로 해도 상관없다.