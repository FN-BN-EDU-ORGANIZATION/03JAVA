package 이헌지;

package C024기본형;

//4.2 문자형 - char

//문자형 역시'char' 한 가지 자료형 밖에 없다. 문자를 저장하기 위한 변수를 선언할 때 사용되며,
//char타입의 변수는 단 하나의 문자만을 저장할 수 있다. 아래의 문장은 char타입의 변수 ch를 선언하고,문자 'A'로 초기화 한다.

//         char ch = 'A' 문자 'A'를 char타입의 변수 ch에 저장.

//위의 문장은 변수에 '문자'가 저장되는 것 같지만,사실은 문자가 아닌'문자의 유니코드(정수)'가 저장된다.
//컴퓨터는 숫자밖에 모르기 때문에 모든 데이터를 숫자로 변환하여 저장하는 것이다. 
//문자'A'의 유니코드는 65이므로 변수 ch에는 65가 저장된다.
/*
                 ▼------- 'A'             
            ch|    | 
                ▼
            ch| 65 |
*/
//그래서 문자 리터럴 대신 문자의 유니코드를 직접 저장할 수도 있다.
//문자'A'의 유니코드는 10진수로 65이며,아래의 두 문장은 동일한 결과를 얻는다.
/*    
      char ch = 'A'  // 문자 'A'를 char타입의 변수 ch에 저장.
      char ch = 65;  // 문자의 코드를 직접 변수 ch에 저장
*/
//만일 어떤 문자의 유니코드를 알고 싶으면,char형 변수에 저장된 값을 정수형(int)으로 변환하면 된다.

// int code = (int)ch;  // ch에 저장된 값을 int타입으로 변환하여 저장한다.

//어떤 타입(type,형)을 다른 타입으로 변환하는 것을 형변환(캐스팅,casting)이라고 하는데,형변환에 대해서는 이 장의 마지막에
//자세히 설명할 것이다. 지금은 문자의 유니코드를 알아내는 방법과. 어떤 유니코드가 어떤 문자를 나타내는가를 알아내는 방법이 있다는 것만
//이해하고 넘어가자
/*
public class Ch02문자형{
	public static void main(String[] args) {
		char ch ='A';       // char ch = '65'
	    int code =(int)ch;	// ch에 저장된 값을 int타입으로 변환하여 저장한다.
	    
	    System.out.printf("%c=%d(%#X)%n", ch, code, code);
	    
	    char hch = '가';     // char hch = 0xAC00;
	    System.out.printf("%c=%d(%#X)%n", hch, (int)hch, (int)hch);
	
	} 
}
*/
//              실행 결과 : A=65(0X41)
//              가=44032(0XAC00) 

//실행결과를 보면,문자'A'의 유니코드는 65(16진수로 0x41)이고,문자 '가'의 유니코드는 44032(16진수로 0xAC00)이라는 것을 
//알 수 있다. 유니코드를 알면 아래와 같이 char형 변수에 문자를 저장할 때,문자 리터럴 대신에 유니코드를 직접 사용할 수도 있다.
/*
        char hch = 0xAC00;         // char hc = '가';

*/
//특수 문자 다루기 
//영문자 이외에 tab이나 backspace 등의 특수문자를 저장하려면,아래와 같이 조금 특별한 방법을 사용한다.

//char tab = '\t';  // 변수 tab에 문자를 저장

//'\t'는 실제로는 두 문자로 이루어져 있지만 한 문자(탭tab)를 의미한다. 
//아래의 표는 탭(tab)과 같이 특수한 문자를 어떻게 표현할 수 있는지 알려준다.
/*
        특수문자           |           문자 리터럴           |
        tab             |             \t              |
        backspace       |             \b              |
        form feed       |             \f              |
        new line        |             \n              |
        carriage return |             \r              |
        역슬래쉬(\)        |             \\              |
        작음따옴표          |             \'              |
        큰따옴표           |             \"              |

*/


//public class Ch02문자형{ public static void main(String[] args) {
//System.out.println('\''); // ''' 처럼 할 수없다.
//System.out.println("abc\t123\b456"); // \b에 의해 3이 지워진다.
//System.out.println('\n'); // 개행(new line)문자 출력하고 개행
//System.out.println("\"Hello\""); // 큰따옴펴를 출력하려면 이렇게 한다.
//System.out.println("c:\\"); } }
//

// 출력값 : ' abc       123 456(버그로 인해 중간에 깨짐)원래는 12456출력


//  "Hello" c:\

//|참고| 한글 윈도우에서는 역슬래쉬(back slash)가 '\'대신 '￦'로 표시된다.

//char 타입의 표현방식 
//char타입의 크기는 2 byte(=16bite)이므로,16자리의 2진수로 표현할 수 있는 정수의 개수인 65536개(=2^16)의 코드를
//사용할 수 있으며, char형 변수는 이범위 내의 코드 중 하나를 저장할 수 있다. 
//예를 들어,문자'A'를 저장하면,아래와 같이 2진수'0000000001000001'(10진수로 65)로 저장된다.

//         |0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|1|   = 16bit 
//                char의 표현형식(문자 'A')

//그래서 문자 리터럴 대신 문자의 유니코드를 직접 저장할 수도 있다. 문자'A'의 유니코드는 10진수로 65이며,
//아래의 두 문장은 동일한 결과를 얻는다.
/*
           char ch = 'A'; // 문자 'A'를 char타입의 변수 ch에 저장.
           char ch =  65; // 문자의 코드를 직접 변수 ch에 저장              
*/
//만일 어떤 문자의 유니코드를 알고 싶으면,char형 변수에 저장된 값을 정수형(int)으로 변환하면 된다.

//int code = (int)ch;    // ch에 저장된 값을 int타입으로 변환하여 저장한다.

//어떤 타입(type,형)을 다른 타입으로 변환하는 것을 형변환(캐스팅,casting)이라고 하는데,
//형변환에 대해서는 이 장의 마지막에 자세히 설명할 것이다. 지금은 문자의 유니코드를 알아내는 방법과,
//어떤 유니코드가 어떤 문자를 나타내는가를 알아내는 방법이 있다는 것만 이해하고 넘어가자.

//public class Ch02문자형{
//	public static void main(String[]args) {
//		char ch = 65;        // char ch =65;
//		int code = (int)ch;  // ch에 저장된 값을 int타입으로 변환하여 저장한다.
//		
//		System.out.printf("%c=%d(%#X)%n" , ch, code, code);
//		
//		char hch = '가';    // char hch = 0xAC00;
//		System.out.printf("%c=%d(%#X)%n" , hch, (int)hch , (int)hch);
//				
//		//실행 결과 :  A=65(0X41)
//		//          가=44032(0XAC00)
//	}
//}

//실행결과를 보면,문자'A'의 유니코드는 65(16진수로 0x41)이고,문자 '가'의 유니코드는 44032(16진수로 0xAC00)이라는 것을
//알 수 있다. 유니코드를 알면 아래와 같이 char형 변수에 문자를 저장할 때,문자 리터럴 대신에 유니코드를 직접 사용할 수도 있다.
/*
     char hch = 0xAC00;   // char hch = '가';
     char hch = '\uAC00'; // 이렇게도 가능
*/
//특수 문자 다루기 

//영문자 이외에 tab이나 backspace등의 특수문자를 저장하려면,아래와 같이 조금 특별한 방법을 사용한다.

//char tab = '\t'; 변수 tab에 문자를 저장

//'\t'는 실제로는 두 문자로 이루어져 있지만 한 문자(tab)를 의미한다. 아래의 표는 탭(tab)과 같이 
//특수한 문자를 어떻게 표현할 수 있는지 알려준다.

















