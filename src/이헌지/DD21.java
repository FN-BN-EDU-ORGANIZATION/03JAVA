package 이헌지;

//인코딩과 디코딩(encoding & decoding)

//컴퓨터가 숫자밖에 모르기 때문에 문자가 숫자로 변환되어 저장된다는 것을 알곘는데,그러면 도대체 어떤 기준에 의한 것일까?
//바로 아래의 오른쪽에 있는 표에 의한 것인데,이 코드표는 '유니코드(unicode)'이다.
/*
             인코딩                   | 문자  | 유니 코드 |                                                                                      
           -------->                |  A   |   65   |
        A           65              |  B   |   66   |       
          <---------                |  C   |   67   | 
             디코딩                    |  ... |   ...  |
                 
                  ▲ 유니코드(unicode)를 이용한 인코딩과 디코딩                     
*/
//위의 그림에서 오른쪽 표를 보면,문자 'A'의 유니코드가 65인 것을 알 수 있다. 그래서 문자'A'를 유니코드로 인코딩하면 65가 되는 것이다.
//반대로 65를 유니코드로 디코딩 하면 문자 'A'가 된다. 이처럼 문자를 코드로 변환하는 것을'문자 인코딩(incoding)',
//그 반대로 코드를 문자로 변환하는 것을'문자 디코딩(dicoding)'이라고 하며,문자를 저장할 때는 인코딩을 해서 숫자로 변환해서 저장하고,
//저장된 문자를 읽어올 때는 디코딩을 해서 숫자를 원래의 문자로 되돌려야 한다.

//| 참고 | 'encode'는 '~을 코드화하다.' 또는 '~을 암호화하다.' 라는 뜻이다.

//당연한 얘기지만 어떻게 인코딩을 했는지를 알아야 디코딩이 가능하다. 만일 인코딩에 사용된 코드표와 디코딩에 사용된 코드표가 다르면
//엉뚱한 글자들로 바뀌어 나타날 것이다. 웹서핑을 하다가 페이지 전체가 알아볼 수 없는 이상한 글자들로 가득찬 경험이 적어도 한 두번쯤은
//있을텐데,그 이뉴는 해당 html문서의 인코딩에 사용된 코드표와 웹브라우져의 설정이 맞지 않아서이다.
//대부분의 경우 웹페이지(html파일)에 인코딩 정보가 포함되어 있어서 웹브라우져가 올바르게 디코딩하지만,웹브라우져의 인코딩 설정이
//웹페이지의 인코딩과 다른 경우 글자가 알아볼 수 없게 깨져서 나타난다. 

//아스키(ASCII)
//'ASCII'는 American Standard Code for Information Interchange'의 약어로 정보교환을 위한 미국의 표준 코드
//란 뜻이다. 아스키는 128개(=2^7)의 문자 집합(Character set)을 제공하는 7 bit 부호로,처음 32개의문자는 인쇄와 전송
//제어용으로 사용되는 '제어문자(control character)'로 출력할 수 없고마지막 문자(DEL)를 제외한 33번째 이후의 문자
//들은 출력할 수 있는 문자들로,기호와 숫자,영대소문자로 이루어져 있다. 
//아스키는 숫자 '0~9',영문자'A~Z'와'a~z'가 연속적으로 배치되어 있다는 트징이 있으며,이러한 특징은 프로그래밍에서 유용하게 활용된다.

//확장 아스키(Extended ASCII)와 한글

//일반적으로 데이터는 byte단위로 다뤄지는데 아스키는 7 bit이므로 1bit가 남는다,이 남는 공간을 활용해서 문자를 추가로 정의한 것이
//'확장 아스키'이다. 확장 아스키에 추가된 128개의 문자는 여러 국가와 기업에서 서로의 필요에 따라 다르게 정의해서 사용한다.
//'ISO(국제표준화기구)'에서 확장 아스키의 표준을 몇 가지 발표했는데,그 중에서 대표적 인 것이'ISO 8859-1'이다.
//이 확장 아스키 버변은 'ISO Latin 1'이라고도 하는데 서유럽에서 일반적으로 사용하는 문자들을 포함하고 있다.

//확장 아스키로도 표현할 수 있는 문자의 개수가 255개뿐이므로 한글을 표현하기에는 턱없이 부족하다.
//그래서 생각해낸 것이 두 개의 문자코드로 한글을 표현하는 방법이었다. 한글을 표현하는 방법은 조합형과 완성형이 있는데,
//조합형은 초성,중성,종성을 조합하는 방식이고,완성형은 확장 아스키의 일부 영역(162~254)에 해당하는 두 문자코드를 조합하여
//한글을 표현한다. 현재 조합형은 사용되지 않고,'완성형(KSC 5601)'에 없는 잘 안 쓰이는 8822글자를 추가한 
//'확장 완성형(CP 949)'이 사용되는데,이것이 바로 한글 윈도우에서 사용하는 문자 인코딩이다. 
//한글 윈도우에서 작성된 문서는기본적으로 'CP949(확장 완성형)'로 인코딩되어 저장된다.

//코드 페이지(code page,cp)
//IBM이 자사의 PC에 '확장 아스키'를 도입해서 사용하기 시작할 때,PC를 사용하는 지역이나 국가에 따라 여러 버젼의 '확장 아스키'가
//필요했다.IBM은 이들을 '코드 페이지(code page)'라 하고,각 코드 페이지에'CP xxx'와 같은 형식으로 이름을 붙였다.
//IBM은 MS와 같은 업체들과 협력하여'코드 페이지'를 만들어내고 공유했다. 한글 윈도우는'CP949'를,영문 윈도우는'CP 437'을 사용한다.

//| 참고 | 코드 페이지는 확장 아스키의 256개 문자를 어떤 숫자로 변활할 것인지를 적어놓은 '문자 코드표(code page)'일뿐이다.

//유니코드(Unicode)
//예전엔 같은 지역 내에서만 문서교환이 주를이뤘지만,인터넷이 발명되면서 서로 다른 지역의 다른 언어를 사용하는 컴퓨터간의 
//문서교환이 활발해지기 시작하자 서로 다른 문자 인코딩을 사용하는 컴퓨터간의 문서교환에 어려움을 겪게 되었다.
//이러한 어려움을 해소하고자 전 세계의 모든 문자를 하나의 통일된 문자집합으로 표현하고자 노력하였고 그 결과가 바로'유니코드'이다.
//유니코드는 처음엔 모든 문자를 2byte(=2^1665536)로 표현하려했으나, 2byte(=16bit)로도 부족해서 21bit(약 200만 문자)
//로 확장되었다. 새로 추가된 문자들을 보충 문자(supplementary character)라고 하는데 이 문자들을 표현하기 위해서는 
//char타입이 아닌 int타입을 사용해야 한다.우리가 보충문자를 쓸 일은 거의 없기 때문에 참고로만 알아 두면 된다.
//유니코드는 먼저 유니코드에 포함시키고자 하는 문자들의 집합을 정의하였는데,이것을 유니코드 문자 셋(또는 캐릭터 셋,character)
//이라고 한다. 그리고 이 문자 셋에 번호를 붙인 것이 유니코드 인코딩이다. 유니코드 인코딩에는 UTF-8,UTF-16,UTF-32등
//여러가지 종류가 있는데 자바에서는 UTF-16을 사용한다. UTF-16은 모든 문자를 2byte의 고정크기로 표현하고 
//UTF-8은 하나의 문자를 1~4 byte의 가변크기로 표현한다. 
//그리고 두 인코딩 모두 처음 128문자가 아스키와 동일하다.아스키를 그대로 포함하고 있는 것이다.

//| 참고 | 코드 포인트(code point)는 유니코드 문자 셋에 순서대로 붙인 일려번호이다.유니코드에는 뭐라고 읽는지도 알 수 
//없는 문자들이 많이 포함되어 있으므로,이 문자들은 번호(코드 포인트)로 다루는 것이 편리하다.
/*
   |   code point   |   유니코드 문자 셋   | ASCII |   UTF-8    | UTF-16  | 
   |   ...          |      ...        |  ...  |   ...      | ...     | 
   |   U+0061       |        a        |  0x61 |    0x61    | 0x0061  | 
   |   U+0062       |        b        |  0x62 |    0x62    | 0x0062  | 
   |    ...         |       ...       |  ...  |     ...    |  ...    | 
   |   U+AC00       |        가        |   -   |  0xEAB080  | 0xAC00  | 
   |   U+AC01       |        각        |   -   |   0XEAB081 | 0xAC01  | 
   |   ...          |       ...       |  ...  |     ...    |         | 
   
                   ▲ 유니코드 인코딩 UTF-8과 UTF-16의 비교
*/
//모든 문자의 크기가 동일한 UTF-16이 문자를 다루기는 편리하지만, 1byte로 표현할 수 있는 영어와 숫자가 2byte로 표현되므로
//문서의 크기가 커진다는 단점이 있다. UTF-8에서 영문과 숫자는 1byte 그리고 한글은 3byte로 표현되기 때문에 문서의 크기가
//작지만 문자의 크기가 가변적이므로 다루기 어렵다는 단점이 있다. 인터넷에서는 전송속도가 중요하므로,문서의 크기가 작을수록 유리하다.
//그래서 UTF-8인코딩으로 작성된 웹문서의 수가 빠르게 늘고 있다.
