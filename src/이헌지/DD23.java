package 이헌지;

//부호있는 정수의 오버플로우
//부호없는 정수와 부호있는 정수는 표현범위 즉,최대닶과 최소값이 다르기 때문에 오버플로우가 발생하는 시점이 다르다.
//부호없는 정수는 2진수로 '0000'이 될 때 오버플로우가 발생하고,부호있는 정수는 부호비트가 0에사 1이 될 때 
//오버플로우가 발생한다.
/*
          | 부호없는 10진수  |   2진수     | 부호있는 10진수   |
           |           0|   0000    | 0           |
           | 	       1|   0001    | 1  		  |
           |   		   2|  0010     | 2           |
           | 	       3|  0011     | 3           |
           |           4|  0100     | 4           |
           |           5|   0101    | 5           |
           | 	       6|  0110     | 6           |
           | 	       7|   0111    | 7   ← 최대값  |  ↘
           |           8|   1000    | -8  ← 최소값  |  ↗ 오버플로우 발생
           |           9|   1001    | -7          |
           |          10|   1010    | -6          |
           |          11|   1011    | -5          |
    	   |          12|   1100    | -4  	      |
           |          13|   1101    | -3  	      |
           |          14|   1110    | -2          |
   	   ↙   |          15|   1111    | -1          |
오버플로우 발생↖ |           0|   0000   | 0            |
            |          1|   0001    | 1           |
    		|          2|   0010    | 2           |

                  ▲ 부호없는 정수와 부호있는 정수의 오버플로우
*/
//부호없는 정수의 경우 표현 범위가 '0~15'이므로 이 값이 계속 반복되고,부호있는 정수의 경우 표현범위가 
//'-8~7'이므로 이 값이 무한히 반복된다.
/*
     최대값 → 15         ...
            14          3
            13          2                 15 + 1  →  0 
            12     ▲    1                최대값       최소값
            ... →       0    ← 최소값
            3      ▼   15    ← 최대값        0 - 1  →  15
            2          14                최소값       최대값
            1          13
     최소값 → 0          ...
     
     
     최대값 →  7       ...
             6        -5
             5        -6                  7 + 1  →  0 
             4    ▲   -7                최대값       최소값
            ... →     -8  ← 최소값
            -5    ▼    7  ← 최대값         -8 -  1  →  7
            -6         6                 최소값       최대값
            -7         5            
     최소값 → -8         4 
                      ...
*/

//public class Ch03정수형{
//	public static void main(String []args) {
//		
//		short sMin = -32768;
//		short sMax = 32767;
//	    char cMin = 0;
//	    char cMax = 65535;
//	    
//	    System.out.println("sMin   =  " + sMin);
//	    System.out.println("sMin-1 =  " + (short)(sMin-1));
//	    System.out.println("sMax   =  " + sMax);
//	    System.out.println("sMax   =  " + (short)(sMax+1));
//	    System.out.println("cMin   =  " + (int)cMin);
//	    System.out.println("cMin-1 =  " + (int)--cMin);
//	    System.out.println("cMax   =  " + (int)cMax);
//	    System.out.println("cMax+1 =  " + (int)++cMax  );	
//	    
//	            출력값 :  sMin   =  -32768
//	            		sMin-1 =  32767
//	            		sMax   =  32767
//	            		sMax   =  -32768
//	            		cMin   =  0
//	            		cMin-1 =  65535
//	            		cMax   =  65535
//	            		cMax+1 =  0
//
//	}	
//}
//short타입과 char타입의 최대값 최소값에 1을 더하거나 뺀 결과를 출력하였다. 실행결과를 좀더 이해하기 쉽게 정리하면 다음과 같다.
/*
         sMin -1 → sMax   //   최소값 - 1  →  최대값
         -32768     32767                   
         sMax -1 → sMax   //   최소값 - 1  →  최대값
         32767    -32768
         cMin -1 → sMax   //   최소값 - 1  →  최대값
           0       65535
         cMax -1 → sMax   //   최소값 - 1  →  최대값
         65535      0     
*/

//최소값에서 1을빼면 최대값이 되고, 최대값에 1을 더하면 최소값이 된다는 것을 확인할 수도 있다.
//아직 이해가 안 된다면,아래의 표가 도움이 될 것이다.

//'short'과 'char'의 크기는 모두 16bit이므로 표현할 수 있는 값의 개수 역시 2^16개(65536개)로 같다.
//그러나'short'은 이 중에서 절반(2^15개 =32768개)을 '음수'를 표현하는데 사용하고,'char'는( 전체2^16개=65535+1개)를
//'양수(65535개)와 0(1개)'을 표현하는데 사용한다.
/*
16비트로 표현헐 수 있는 정수의 개수 : 2^16개(65536개)
            short타입의 표현범위: -2^16 ~ 2^15 -1(-32768 ~ 32767)
            char 타입의 표현범위: 0~2^16 -1(0~65535)
           
                  -2^15                   2^15-1
                          short(2^16개)
  <----------------------------------------------------------------->
                              char(2^16개)  
                          0               2^16 -1                     
*/
//