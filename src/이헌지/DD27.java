package 이헌지;


//실수형의 저장형식
//앞서 언급한 바와 같이 실수형은 정수형과 표현형식이 달라서,실수형은 값을 부동소수점수(floating-point)의 형태로 저장한다.
//부동소수점수는 실수를 '±M x 2^E'와 같은 형태로 표현하는 것을 말하며,부동소수점수는 부호(sign),지수(Exponent),
//가수(Mantissa),모두 세 부분으로 이루어져 있다.
/*
    
                 ±M x 2^E
               
그래서 부동소수점수는 다음과 같이 세 부분으로 나누어 저장된다.

    float:1 + 8+ 23 = 32(4byte)
   |s(1)|     E(8)        |        M(23)         |

    double: 1 + 11 + 52 = 64(8 byte) 
   |s(1)|     E(11)       |            M(52)                 |

                ▲ float와 double의 표현형식
*/  
//위와 같은 표현형식은 IEEE754라는 표준을 따른 것인데,IEEE754는 
//'전기 전자 기술자 협회(IEEE,Institute of Electrical and Electronics Engineers)'에서
//재정한 부동소수점수의 표현방법이다.
/*
 | 기호 |     의미       |                            설명                        		|
 |  S | 부호(Sign bit  | 0이면 양수,1이면 음수                                       		|
 |  E | 지수(Exponent) | 부호있는 정수,지수의 범위는 -127~128(float),-1023~1024(double) 		|
 |  M | 가수(Mantissa) | 실제값을 저장하는 부분,10진수로 7자리(float),15자리(double의 정밀도로 저장 가능 |
   
                       ▲ 실수 표현형식의 구성요소 
*/
//1.부호(Sign bit)
//'S'는 부호비트(sign bit)를 의미하며 1bit이다. 이 값이 0이면 양수를,1이면 음수를 의미한다.
//정수형과 달리 '2의 보수법'을 사용하지 않기 때문에 양의 실수를 음의 실수로 바꾸려면 그저 부호비트만 0에서 1로 변경하면 된다.

//2.지수(Exponent)
//'E'는 지수를 저장하는 부분으로 float의 경우,8 bit의 저장공간을 갖는다. 지수는 '부호있는 정수'이고 
//8 bit 로는 모두 2^8(=256)개의 값을 저장할 수 있으므로,'-127~128'의 값이 저장된다.
//이 중에서 -127과 128은 '숫자 아님(NaN,Not a Number)'이나 '양의 무한대(POSITIVE_INFINITY)',
//'음의 무한대(NEGATIVE_INFINITY)'와 같이 특별한 값의 표현을 위해 예약되어 있으므로 실제로 사용가능한 지수의 범위는
//'-126~127'이다. 그래서 지수의 최대값이 127이므로 float타입으로 표현할 수 있는 최대값은 2^127이고,
//10진수로 약 10^38이다 그러나 float의 최소값은 가수의 마지막 자리가 2^-33이므로 지수의 최소값보다 
//2^-23배나 더 작은 값,약10^-45 이다.

//0.0000000000000000000001 x 2^-126 = 1.0 x 2^-148 ≒ 10^-45

//3.가수(Mantissa)
//'M'은 실제 값인 가수를 저장하는 부분으로 float의 경우,2진수 23자리를 저장할 수 있다.2진수 23자리로는 약 7자리의 10진수를 
//저장할 수 있는데 이것이 바로 float의 정밀도가 된다, doule은 가수를 저장할 수 있는 공간이 52자리로 float보다 약 2배이므로
//double이 float보다 약 2배의 정밀도를 갖는 것이다.
