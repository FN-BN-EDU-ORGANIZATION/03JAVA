package 황다은;

//class Data_1{
//int value;
//}
//class Data_2{
//	int value;
//	Data_2(int x){  //매개변수 있는 생성자
//		value = x;
//	}
//}

//class Car{
//String color;       
//String gearType;
//int door;
//
//Car(){}
//Car(String c, String g, int d){
//	color = c;
//	gearType = g;
//	door = d;
//}
//}
public class C20230816 {
	/*
	 * 생성자란?
	 * 
	 * 생성자는 인스턴스가 생성될 때 호출되는 ‘**인스턴스 초기화 메서드**’이다.
	 * 
	 * 따라서 인스턴스변수의 초기화 작업에 주로 사용되며, 인스턴스 생성 시에 실행되어야 할 작업을 위해 사용된다.
	 * 
	 * 즉, 인스턴스초기화를 편리하게 사용하기 위해 생성자를 사용한다.
	 * 
	 * 생성자 만드는 조건
	 * 
	 * 생성자는 메서드처럼 *클래스 내에 선언*된다.
	 * 
	 * 구조도 메서드와 유사하지만 ***리턴값이 없다는 점이 차이점***이다.
	 * 
	 * 1. 생성자의 이름은 클래스의 이름과 같아야 한다. 2. 생성자는 리턴 값이 없다.(void 안붙임) 3. 모든 클래스는 반드시 생성자를
	 * 가져야 한다. 1. 생성자가 없는 경우 프로그램에서 자체로 기본생성자 생성..
	 * 
	 * 예시
	 */
	//클래스이름(타입 변수명, 타입 변수명, ...){
			// 인스턴스 생성 시 수행될 코드,
			// 주로 인스턴스 변수의 초기화 코드 적음
	//}
//	class Card{
//		Card(){    // 매개변수가 없는 생성자
//				// 인스턴스 초기화 작업
//		}
//		Card(String k, int num){   //매개변수가 있는 생성자
//				// 인스턴스 초기화 작업
//		}
//	}
	
	/*
	 * 기본 생성자(default constructor)
	 * 
	 * - 매개변수가 없는 생성자 - 생성자가 하나도 없을 때만, 컴파일러가 자동 추가
	 */
//	public static void main(String[] args) {
//		Data_1 d1 = new Data_1(); //생성자 호출 성공!
//		//Data_2 d2 = new Data_2(); //생성사 호출 실패.. 기본생성자 정의 안했기 때문..
//	}
	/*
	 * 위 코드는 Data_1은 생성자 호출 성공했지만, Date_2는 생성자호출 실패했다. 그 이유는, Data_2는 생성자를 정의할 때
	 * 매개변수가 있는 생성자를 정의를 했는데 막상 호출하는건 기본 생성자를 호출 했기 때문에 오류가 났다. 그러면 Data_1은
	 * 기본생성자를정의를 하지 않았음에도 불구하고 성공하는 이유는 뭘까? 그 해답은 기본 생성자의 규칙에 생성자가 하나도 없을 때, 컴파일러가
	 * 자동으로 기본생성자를 추가하기 때문에 Data_1은 오류 없이 기본 생성자 호출에 성공을 했다.
	 * 즉, **기본생성자가 컴파일러에 의해서 추가되는 경우는 클래스에 정의된 생성자가 하나도 없을 때 뿐이다!**
	 */
	
	/*
	 * 매개변수가 있는 생성자
	 * 
	 * 생성자도 메서드처럼 매게변수를 선언하여 호출 시 값을 넘겨받아 인스턴스의 초기화 작업에 사용할 수 있다.
	 * 
	 * 다음 예시를 보면 생성자를 사용했을 때랑 사용 안 했을 때를 비교해보자!
	 */
//	public static void main(String[] args){
//		Car c1 = new Car(); //매개변수 생성자 사용 안한 경우
//		c1.color = "white";
//		c1.gearType = "auto";
//		c1.door = 4;
//		//매개변수 생성자 사용한 경우
//		Car c2 = new Car("white","auto",4);
//		
//		System.out.println("c1의 color =" + c1.color + " ,gearType = " + c1.gearType + " ,door = " + c1.door);
//		System.out.println("c2의 color =" + c2.color + " ,gearType = " + c2.gearType + " ,door = " + c2.door);
//		// 결과는 아래 위 똑같다..
//	}
	//위 코드를 보면 같은 내용이지만 매개변수를 갖는 생성자를 사용했을 때 코드가 더 간결하고 직관적이다. 
	//이처럼 클래스를 작성할 때 다양한 생성자를 제공함으로써 인스턴스 생성 후에 별도로 초기화를 하지 않아도 되도록 하는 것이 바람직하다.
	
}
