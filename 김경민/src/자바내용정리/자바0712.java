package 자바내용정리;

//정처기 1과목 중 패턴 구조 공부하였습니다.

public class 자바0712 {
	
//	디자인 패턴
//	(생성 패턴, 구조 패턴, 행위 패턴)
//	
//	생성패턴
//	객체의 생성과 관련된 패턴
//	
//	추상 팩토리(Abstract Factory)
//	구체적인 클래스에 의존하지 않고, 인터페이스를 통해 서로 연관/의존하는 객체들의 그룹으로 생성하여 추상적으로 표현한다.
//	
//	빌더(Builder)
//	작제 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성한다.
//	
//	팩토리 메소드(Factory Method)
//	객체 생성을 서브클래스에서 처리하도록 분리하여 캡슐화한 패턴이다.
//	
//	프로토타입(Prototype)
//	원본 객체를 복제하는 방법으로 객체를 생성하는 패턴
//	
//	싱글톤(Singleton)
//	하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만, 여러 프로세스가 동시에 참조할 수는 없다.
//	------------------------------------------------------
//	구조패턴
//	클래스나 객체들을 조합하여 더 큰 구조로 만들 수 있게 해주는 패턴
//	
//	어댑터(Adapter)
//	호환성이 없는 클래스들의 인터페이스를 다른 클래스가 이용할 수 있도록 변환해주는 패턴
//	
//	브리지(Bridge)
//	구현부에서 추상층을 분리하여, 서로가 독립적으로 확장할 수 있도록 구성한 패턴
//	
//	컴포지트(Composite)
//	여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴
//	
//	데코레이터(Decorator)
//	객체 간의 결합을 통해 능동적으로 기능들을 확장할 수 있는 패턴
//	
//	퍼싸드(Facade)
//	복잡한 서브 클래스들을 피해 더 상위에 인터페이스를 구성함으로써 서브 클래스들의 기능을 간편하게 사용할 수 있도록 하는 패턴
//	
//	플라이웨이트(Flyweight)
//	인스턴스가 필요할 때마다 매번 생성하는 것이 아니고 가능한 한 공유해서 사용함으로써 메모리를 절약하는 패턴
//	
//	프록시(Proxy)
//	접근이 어려운 객체와 여기에 연결하려는 객체 사이에서 인터페이스 역할을 수행하는 패턴
//	-----------------------------------------------------
//	행위패턴
//	클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의
//	
//	책임연쇄
//	커맨드
//	인터프리터
//	반복자
//	중재자
//	메멘토
}
