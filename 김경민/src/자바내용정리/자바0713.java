package 자바내용정리;

public class 자바0713 {
//	요구사항 개발 프로세스의 순서
//
//	도출 > 분석 > 명세 > 확인
//
//	-----------------------------------------------------------------------------
//
//	Gof(Gangs of Four) 디자인 패턴
//
//	factory method pattern
//
//	상위클래스에서 객체를 생성하는 인터페이스를 정의하고, 하위클래스에서 인스턴스를 생성하도록 하는 방식
//
//	​
//
//	prototype pattern
//
//	prototype을 먼저 생성하고 인스턴스를 복제 하여 사용하는 구조
//
//	​
//
//	bridge pattern
//
//	구현부에서 추상층을 분리하여 각자 독립적으로 확장이 가능하게 하는 패턴
//
//	​
//
//	Adapter pattern
//
//	기존에 구현되어 있는 클래스에 기능 발생 시 기존 클래스를 재사용할 수 있도록 중간에서 맞춰주는 역할
//
//	​
//
//	mediator pattern
//
//	객체간의 통제와 지시의 역할을 하는 중재자를 두어 객체지향의 목표를 달성하게 해준다.
//
//	-----------------------------------------------------------------------------
//
//	소프트웨어 아키텍처 설계
//
//	시스템 품질속성
//
//	가용성 Avaliability
//
//	변경 용이성 Modifiability
//
//	사용성 Usability
//
//	성능
//
//	보안성
//
//	시험용의성
//
//	-----------------------------------------------------------------------------
//
//	UML 다이어그램 (절차 다이어그램은 없다!!)
//
//	-구조적 다이어그램
//
//	클래스, 객체, 컴포넌트, 배치, 복합체, 패키지
//
//	-행위 다이어그램
//
//	유스케이스, 시퀀스, 커뮤니케이션, 상태, 활동, 타이밍 ,상호작용
//
//	-----------------------------------------------------------------------------
//
//	Dependency(의존) : 한 사물의 명세서가 바뀌면 그것을 사용하는 다른 사물에게 영향을 끼치는 것을 말한다 (Cascade랑 비슷)
//
//	Realization(실체화) : 한 객체가 다른 객체에 의해 오퍼레이션을 수행하도록 지정
//
//	Generalization(일반화) : 일반화된 사물과 좀 더 특수화된 사물 사이의 관계를 말합니다.('is-a')관계
//
//	Association(연관) : 두 사물간의 구조적 관계로, 어느 한 사물 객체가 다른 사물 객체와 연결되어 있음을 말함 ('has-a')관계라고도 합니다
//
//	-----------------------------------------------------------------------------
//
//	2과목
//
//	-----------------------------------------------------------------------------
//
//	힙 정렬(Keap Sort)
//
//	정렬할 입력 레코드들로 힙을 구성하고 가장 큰 키 값을 갖는 루트 노드를 제거하는 과정을 반복하여 정렬하는 기법
//
//	완전 이진트리로 입력자료의 레코드를 구성한다.
//
//	최적, 평균, 최악 수행시간 모두 O(nlog2n)이다.
//
//	-----------------------------------------------------------------------------
//
//	체크인
//
//	버전 관리 항목 중 저장소에 새로운 버전의 파일로 갱신하는 것
//
//	​
//
//	롤백
//
//	데이터베이스에서 업데이트에 오류가 발생할 때, 이전 상태로 되돌리는 것
//
//	-----------------------------------------------------------------------------
//
//	디지털 저작권 관리(DRM) 구성 요소
//
//	콘텐츠 분배자 : 암호화된 콘텐츠를 유통하는곳/사람
//
//	패키저 : 콘텐츠를 메타데이터와 함꼐 배포가능한 형태로 묶어 암호화
//
//	클리어링 하우스 : 키 관리 및 라이센스 발급 관리
//
//	DRM 컨트롤러 : 배포된 콘텐츠의 이용권한을 통제
//
//	​
//
//	+ Dataware house는 DRM 구성 요소가 아니라 사용자의 의사 결정에 도움을 주기 위하여 기간시스템의 데이터베이스에 축적된 데이터를 공통의 형식으로 변환해서 관리하는 데이터베이스를 말한다.
//
//	-----------------------------------------------------------------------------
//
//	블랙박스 테스트
//
//	작동 원리를 모르는 상태에서 동작을 검사 하는 방식(사용자 관점)
//
//	비정상적인 자료를 입력해도 오류 처리를 수행하지 않는 경우
//
//	정상적인 자료를 입력해도 요구된 기능이 제대로 수행되지 않는 경우
//
//	경계값을 입력할 경우 요구된 출력 결과가 나오지 않는 경우
//
//	등
//
//	​
//
//	화이트박스 테스트
//
//	내부 소스코드를 테스트하는 기법(개발자 관점)
//
//	반복 조건을 만족하는데도 루프 내의 문장이 수행되지 않는 경우
//
//	등
//
//	-----------------------------------------------------------------------------
//
//	정렬된 N개의 데이터를 처리하는 데 소요되는 시간
//
//	O(Nlog2N) : 선형 로그형 복잡도 (퀵정렬, 병합정렬)
//
//	O(N2) : 제곱형(버블정렬, 삽입정렬, 선택정렬)
//
//	-----------------------------------------------------------------------------
//
//	인터페이스 구현 검증 도구
//
//	xUnit, STAF, Fitnesse, NTAF, Selenium, watir 등
//
//	​
//
//	+ Foxbase는 프로그래밍 언어다.
//
//	-----------------------------------------------------------------------------
//
//	스택을 이용한 연산
//
//	재귀호출, 후위표현의 연산, 깊이우선탐색
//
//	​
//
//	큐를 이용한 연산
//
//	선택정렬
}
